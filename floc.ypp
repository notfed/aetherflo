%{

#include "interpreter.h"
#include <stdio.h>
#include <stdlib.h>

using namespace Interpreter;

extern int yylex();
extern int yyparse();
extern FILE* yyin;
extern int yylineno;

void yyerror(const char* s);

int yydebug=1;

%}

%code requires
{
#include "interpreter.h"
}

%union {
  char* name;
  char* op;
  int val;
  Interpreter::Statements* statements_node;
  Interpreter::Statement* statement_node;
  Interpreter::Expression* expression_node;
}

%token<val> T_INT
%token<name> T_ID

%token<op> T_PLUS T_MINUS T_MULTIPLY T_DIVIDE
%token<op> T_RELOP

%token T_DEF
%token T_NEWLINE

%left '+' '-'
%left '*' '/'
%nonassoc '<' '>' T_LE T_GE T_EQ T_NE 

%type<statements_node> stmts
%type<statement_node> stmt print assn cond funcdef funccall
%type<expression_node> expr factor

%start program

%%

program : stmts        { $1->Execute(); }

stmts   : stmt T_NEWLINE stmts   { $$ = new Statements($1,$3); }
	| stmt                   { $$ = new Statements($1,nullptr); }
	| T_NEWLINE stmts        { $$ = $2; }
	| /* e */                { $$ = nullptr; }
        ;
stmt	: assn 
        | cond
        | print     
        | funcdef
        | funccall
        ;
print   : '&' expr       { $$ = new Print($2); }
	;
assn    : '{' expr '}' '|' ':' T_ID   { $$ = new Assignment(new Id($6),$2); }
	;
cond    : '(' expr ')' '?' '?' '(' stmts ')' { $$ = new Conditional($2,$7); }
	;
expr    : expr '<' expr { $$ = new ExpressionNode($1,$3, new Op("<")); }
     	| expr '>' expr { $$ = new ExpressionNode($1,$3, new Op(">")); }
     	| expr T_EQ expr { $$ = new ExpressionNode($1,$3, new Op("==")); }
     	| expr T_NE expr { $$ = new ExpressionNode($1,$3, new Op("!=")); }
     	| expr T_LE expr { $$ = new ExpressionNode($1,$3, new Op("<=")); }
     	| expr T_GE expr { $$ = new ExpressionNode($1,$3, new Op(">=")); }
     	| expr '+' expr { $$ = new ExpressionNode($1,$3, new Op("+")); }
     	| expr '-' expr { $$ = new ExpressionNode($1,$3, new Op("-")); }
     	| expr '*' expr { $$ = new ExpressionNode($1,$3, new Op("*")); }
     	| expr '/' expr { $$ = new ExpressionNode($1,$3, new Op("/")); }
        | factor
	;
factor	: '(' expr ')' { $$ = $2; }
       	| T_INT  { $$ = new Val($1); }
       	| T_ID   { $$ = new Id($1); }
	;
funcdef : T_DEF T_ID '(' ')' '=' '{' stmts '}' { $$ = new FunctionAssignment(new Id($2),$7); } 
        ;
funccall : T_ID '(' ')'   { $$ = new FunctionCall(new Id($1)); }
         ;

%%

extern int yy_flex_debug;
int main() {
    yy_flex_debug = 0;
    yyparse();
    return 0;
}

void yyerror(const char* s) {
    fprintf(stderr, "error: %s: line %d\n", s, yylineno);
    exit(1);
}
